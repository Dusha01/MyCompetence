import logging
from aiogram import Bot
from dependency_injector.wiring import inject, Provide

from modules.tg_bot.dto import ContactFormDTO, ContactResponseDTO

logger = logging.getLogger(__name__)

class TelegramBotService:
    @inject
    def __init__(
        self, 
        token: str = Provide["config.TOKEN"],
        chat_id: str = Provide["config.CHAT_ID"]
    ):
        if not token or not chat_id:
            raise ValueError('Error token or chatID')
        self.bot = Bot(token=token)
        self.chat_id = chat_id

    async def send_contact_message(self, form_data: ContactFormDTO) -> ContactResponseDTO:
        try:
            message = (
                "üì¨ *–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞*\n\n"
                f"üë§ *–ò–º—è:* {form_data.name}\n"
                f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {form_data.phone}\n"
                f"üìß *Email:* {form_data.email}\n"
                f"üìå *–¢–µ–º–∞:* {form_data.subject}\n\n"
                f"üìù *–°–æ–æ–±—â–µ–Ω–∏–µ:*\n{form_data.message}"
            )

            await self.bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode="Markdown"
            )

            logger.info('Message sent successfully')
            return ContactResponseDTO(
                status="success",
                message="–§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã: {str(e)}")
            return ContactResponseDTO(
                status="error",
                message="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–º—ã"
            )